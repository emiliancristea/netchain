name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUST_LOG: info

jobs:
  check:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --workspace --no-deps --document-private-items

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, nightly]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-version }}
          override: true
          target: wasm32-unknown-unknown

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang libclang-dev protobuf-compiler

      - name: Install test tools
        run: |
          cargo install cargo-nextest
          cargo install cargo-fuzz

      - name: Run unit tests
        run: cargo nextest run --workspace --all-features

      - name: Run integration tests
        run: cargo test --test comprehensive_integration_tests

      - name: Run security tests
        run: |
          cargo test --test consensus_security_tests
          cargo test --test contract_security_tests
          cargo test --test attack_simulations

      - name: Run performance tests
        run: |
          cargo test --test tps_benchmarks -- --nocapture
          cargo test --test fee_benchmarks -- --nocapture

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install security tools
        run: |
          cargo install cargo-audit
          cargo install cargo-fuzz

      - name: Run security audit
        run: cargo audit

      - name: Run fuzz tests (short duration)
        run: |
          timeout 300 cargo fuzz run contract_fuzzer || true
          timeout 300 cargo fuzz run oracle_fuzzer || true
          timeout 300 cargo fuzz run ibc_fuzzer || true

      - name: Upload fuzz results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: fuzz-results
          path: fuzz/artifacts/

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang libclang-dev

      - name: Build release
        run: cargo build --release --verbose

      - name: Build WASM runtime
        run: |
          cd runtime
          cargo build --release --target wasm32-unknown-unknown

      - name: Package artifacts
        run: |
          mkdir -p artifacts
          cp target/release/netchain-node artifacts/
          cp target/wasm32-unknown-unknown/release/netchain_runtime.wasm artifacts/
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: netchain-build
          path: artifacts/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: netchain/node
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  multi-node-test:
    name: Multi-Node Integration Test
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start multi-node testnet
        run: |
          docker-compose -f docker/docker-compose.yml up -d
          sleep 60 # Wait for nodes to start

      - name: Run integration tests
        run: |
          docker-compose -f docker/docker-compose.yml --profile testing up netchain-tests

      - name: Collect test results
        if: always()
        run: |
          docker-compose -f docker/docker-compose.yml logs netchain-tests > test-results.log
          docker-compose -f docker/docker-compose.yml exec -T netchain-tests cat /results/test_report.md > test-report.md || true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: multi-node-test-results
          path: |
            test-results.log
            test-report.md

      - name: Clean up
        if: always()
        run: docker-compose -f docker/docker-compose.yml down -v

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install criterion
        run: cargo install cargo-criterion

      - name: Run benchmarks
        run: cargo criterion --workspace

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-benchmarks
          path: target/criterion/

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: llvm-tools-preview

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install coverage tools
        run: |
          cargo install cargo-llvm-cov

      - name: Generate coverage report
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: lcov.info
          fail_ci_if_error: true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [check, test, security, build, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: netchain-build
          path: artifacts/

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            artifacts/netchain-node
            artifacts/netchain_runtime.wasm
          generate_release_notes: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [check, test, security, build, docker]
    if: always()
    steps:
      - name: Notify Discord
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "Netchain CI/CD Pipeline"
          description: "Build failed on ${{ github.ref }}"
          color: 0xff0000

      - name: Notify Discord (Success)
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "Netchain CI/CD Pipeline"
          description: "Build succeeded on ${{ github.ref }}"
          color: 0x00ff00